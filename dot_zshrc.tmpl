# Exit if not running interactively (but allow for testing)
[[ $- != *i* ]] && [[ -z "$ZSH_TEST_MODE" ]] && return

# Disable Oh My Zsh automatic updates and skip compfix check for speed
export DISABLE_AUTO_UPDATE=true
export ZSH_DISABLE_COMPFIX=true

# Set PATH
export PATH="$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH"

# Path to your Oh My Zsh installation
export ZSH="$HOME/.oh-my-zsh"

# Theme - Using powerlevel10k (installed via chezmoi externals)
ZSH_THEME="powerlevel10k/powerlevel10k"

# Load zsh fixes before Oh My Zsh initialization
[[ -f "$HOME/.config/shell/zsh-fix.sh" ]] && source "$HOME/.config/shell/zsh-fix.sh"

# Configure oh-my-zsh plugins
zstyle :omz:plugins:ssh-agent identities id_ed25519
zstyle :omz:plugins:ssh-agent lifetime 1h
zstyle :omz:plugins:ssh-agent quiet yes

plugins=(
	git
	terraform
	ansible
	ssh-agent
	tmux
	zsh-autosuggestions
	zsh-syntax-highlighting
)

# Only proceed with Oh My Zsh configuration if it's installed
if [[ -d "$ZSH" ]]; then
	# IFS is already properly set by zsh-fix.sh
	
	# Load Oh My Zsh
	source "$ZSH/oh-my-zsh.sh"
	
	# Restore IFS if needed (set by zsh-fix.sh)
	if [[ -n "$_ifs_restore_needed" ]] && declare -f _restore_ifs >/dev/null; then
		_restore_ifs
		unset _ifs_restore_needed
	fi
	
	# Load Powerlevel10k configuration
	[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
else
	echo "Warning: Oh My Zsh not found at $ZSH"
fi

# Enable vi mode keybindings (only if ZLE is available)
if [[ -n "${ZLE_VERSION:-}" ]] || zmodload zsh/zle 2>/dev/null; then
	bindkey -v
fi

# ZLE error fixes are handled by zsh-fix.sh loaded earlier

# OCaml/opam configuration
# This loads opam configuration and environment variables
[[ ! -r "$HOME/.opam/opam-init/init.zsh" ]] || source "$HOME/.opam/opam-init/init.zsh" > /dev/null 2> /dev/null

# Load NVM
	export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && source "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Load additional shell configurations from your config directory.
for conf in "$HOME/.config/shell/"*.sh; do
	[ -f "$conf" ] && . "$conf"
done

# Auto-start tmux (placed at the end to ensure all environment is set up first)
if [[ -z "$TMUX" ]] && [[ ! -n "$SSH_TTY" ]] && [[ "$TERM_PROGRAM" != "vscode" ]]; then
    # Allow bypassing tmux by setting NOTMUX=1
    if [[ -z "$NOTMUX" ]]; then
        # Attempt to attach to existing session or create a new one
        exec tmux new-session -A
    fi
fi